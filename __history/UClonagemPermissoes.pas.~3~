unit UClonagemPermissoes;

interface

type
  TFuncionario = class(TObject)
  private
    { private declarations }
    FId : Integer;
    FId2 : Integer;
    FPermissoes : String;
  protected
    { protected declarations }
  public
    { public declarations }
    Property Id : Integer read FId write FId;
    Property Id2 : Integer read FId2 write FId2;
    Property Permissoes : String read FPermissoes write FPermissoes;

    function ClonagemFinanceiro: Boolean;

  published
    { published declarations }
  end;

implementation

uses UDmFuncionario, SysUtils;

{ TFuncionario }

function TFuncionario.ClonagemFinanceiro: Boolean;
var
  sqlUpdate,
  sqlCampos,
  sqlWhere : string;
begin
  Result := True;

  try
      sqlCampos :=
      ' UPDATE Funcionarios '+
      '   Set  PermissoesFinanceiro =   '+
      '(Select PermissoesFinanceiro from Funcionarios where Fun_Id = :Fun_id)';

      sqlWhere :=
      '  WHERE Fun_id = :Id2 ';

      sqlUpdate := sqlCampos + sqlWhere;

    DmFuncionario.qFuncObj.Close;
    DmFuncionario.qFuncObj.SQL.Text := sqlUpdate;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id').Value := Self.Id;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Id2').Value := Self.Id2;
    DmFuncionario.qFuncObj.Parameters.ParamByName('FPermissoes').Value := Self.Permissoes;

    DmFuncionario.qFuncObj.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;
  end;
end;
end.
