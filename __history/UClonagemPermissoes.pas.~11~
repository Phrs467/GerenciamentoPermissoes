unit UClonagemPermissoes;

interface

type
  TClonagemPermissoes = class(TObject)
  private
    { private declarations }
    FId : Integer;
    FId2 : Integer;
    FPermissoes : String;
  protected
    { protected declarations }
  public
    { public declarations }
    Property Id : Integer read FId write FId;
    Property Id2 : Integer read FId2 write FId2;
    Property Permissoes : String read FPermissoes write FPermissoes;

    function ClonagemFinanceiro: Boolean;
    function ClonagemVestibular: Boolean;
    function ClonagemAtendimento: Boolean;
    function ClonagemBiblioteca: Boolean;

  published
    { published declarations }
  end;

implementation

uses UDmFuncionario, SysUtils, Vcl.Dialogs;

{ TClonagemPermissoes }

function TClonagemPermissoes.ClonagemAtendimento: Boolean;
var
  sqlUpdate,
  sqlCampos,
  sqlWhere : string;
begin
  Result := True;

  try
    if not DmFuncionario.qFuncObj.Eof then
    begin
      // Verifica se PermissoesFinanceiro é NULL
      if DmFuncionario.qFuncObj.FieldByName('PermissoesFinanceiro').IsNull then
      begin
        // Exibe mensagem de aviso
        ShowMessage('O usuário não possui permissões para o Perfil selecionado');
      end
      else
      begin
        sqlCampos :=
              ' UPDATE Funcionarios '+
              '   Set  PermissoesAtendimento =   '+
              '(Select PermissoesAtendimento from Funcionarios where Fun_Id = :Fun_id)';

        sqlWhere :=
              '  WHERE Fun_id = :Fun_id2 ';

        sqlUpdate := sqlCampos + sqlWhere;

        DmFuncionario.qFuncObj.SQL.Text := sqlUpdate;
        DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id').Value := Self.Id;
        DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id2').Value := Self.Id2;
      end;
    end;
    DmFuncionario.qFuncObj.Close;

    DmFuncionario.qFuncObj.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;
  end;
end;

function TClonagemPermissoes.ClonagemBiblioteca: Boolean;
var
  sqlUpdate,
  sqlCampos,
  sqlWhere : string;
begin
  Result := True;

  try
    sqlCampos :=
      ' UPDATE Funcionarios '+
      '   Set  PermissoesBiblioteca =   '+
      '(Select PermissoesBiblioteca from Funcionarios where Fun_Id = :Fun_id)';

    sqlWhere :=
      '  WHERE Fun_id = :Fun_id2 ';

    sqlUpdate := sqlCampos + sqlWhere;

    DmFuncionario.qFuncObj.Close;
    DmFuncionario.qFuncObj.SQL.Text := sqlUpdate;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id').Value := Self.Id;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id2').Value := Self.Id2;

    DmFuncionario.qFuncObj.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;
  end;
end;

function TClonagemPermissoes.ClonagemFinanceiro: Boolean;
var
  sqlUpdate,
  sqlCampos,
  sqlWhere : string;
begin
  Result := True;

  try
    sqlCampos :=
      ' UPDATE Funcionarios '+
      '   Set  PermissoesFinanceiro =   '+
      '(Select PermissoesFinanceiro from Funcionarios where Fun_Id = :Fun_id)';

    sqlWhere :=
      '  WHERE Fun_id = :Fun_id2 ';

    sqlUpdate := sqlCampos + sqlWhere;

    DmFuncionario.qFuncObj.Close;
    DmFuncionario.qFuncObj.SQL.Text := sqlUpdate;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id').Value := Self.Id;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id2').Value := Self.Id2;

    DmFuncionario.qFuncObj.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;
  end;
end;
function TClonagemPermissoes.ClonagemVestibular: Boolean;
var
  sqlUpdate,
  sqlCampos,
  sqlWhere : string;
begin
  Result := True;

  try
    sqlCampos :=
      ' UPDATE Funcionarios '+
      '   Set  PermissoesVestibular =   '+
      '(Select PermissoesVestibular from Funcionarios where Fun_Id = :Fun_id)';

    sqlWhere :=
      '  WHERE Fun_id = :Fun_id2 ';

    sqlUpdate := sqlCampos + sqlWhere;

    DmFuncionario.qFuncObj.Close;
    DmFuncionario.qFuncObj.SQL.Text := sqlUpdate;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id').Value := Self.Id;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id2').Value := Self.Id2;

    DmFuncionario.qFuncObj.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;
  end;
end;

end.
